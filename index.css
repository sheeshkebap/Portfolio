/* Basis */
* { box-sizing: border-box; }
html, body { height: 100%; margin: 0; }
body {
	background: #ffffff; /* Seitenhintergrund bleibt weiß (seitliche Ränder wirken so weiß) */
	font-family: Arial, Helvetica, sans-serif;
	color: #111;
}

:root {
	/* leicht anpassbare Werte */
	--container-pad: 18px;
	--cards-gap: 18px;
}

/* Zentrierter Container: auf breiten Bildschirmen entstehen seitliche weiße Ränder
   und wir behalten horizontales Padding; vertikales Padding wird bei der Card-Höhe berücksichtigt */
.container {
	max-width: 1200px;
	margin: 0 auto;
	/* vertikales Padding (oben + unten = 36px) wird bei .cards Höhe abgezogen */
	padding: var(--container-pad);
}

/* Die drei Karten füllen zusammen genau die Viewport-Höhe (Padding oben+unten und Gaps abziehen) */
.cards {
	/* reduzierte Überlauf-Berechnung: wir rechnen pro Card die genaue Höhe; gap wird verwendet */
	display: flex;
	flex-direction: column;
	gap: var(--cards-gap);
	/* height: calc(100vh - 36px); */
}

/* Jede Card nimmt gleichen Anteil ein -> fest berechnete Höhe statt flex:1 */
.card {
	position: relative;
	display: flex;
	justify-content: center;
	align-items: center;
	overflow: hidden;
	border-radius: 14px;
	text-decoration: none;
	/* feste Höhe: (100vh - 2*container-pad - 2*gaps) / 3
	   Es gibt 2 Gaps zwischen 3 Items in column layout */
	flex: none;
	height: calc((100vh - (var(--container-pad) * 2) - (var(--cards-gap) * 2)) / 3);
	/* kleine Schattenoptik, optional */
	box-shadow: 0 6px 18px rgba(0,0,0,0.06);
}

/* Bild: fülle die Card-Höhe vollständig, behalte Seitenverhältnis und zeige komplettes Bild */
.card img {
	/* wichtig: Höhe bestimmt die Skalierung, Breite folgt automatisch */
	height: 100%;
	width: auto;
	max-width: 100%; /* falls Breite ansonsten größer als Card-Breite würde, skaliere nach Breite */
	object-fit: contain; /* Gesamtbild sichtbar, keine Abschneidung */
	display: block;
	margin: 0 auto;
	transition: transform 500ms cubic-bezier(.2,.9,.2,1), filter 400ms ease;
}

/* Overlay (die graue Box), startet außerhalb und fährt hoch */
.overlay {
	position: absolute;
	left: 0;
	right: 0;
	bottom: 0;
	height: 33.333%; /* 1/3 der Card-Höhe */
	background: rgba(70,70,70,0.62); /* dunkle, halbtransparente Box */
	color: #fff;
	padding: 16px;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center; /* horizontal zentrieren */
	text-align: center;  /* Text zentriert */
	transform: translateY(100%);
	transition: transform 350ms cubic-bezier(.2,.9,.2,1);
}

/* Feinheiten: runde Ecken an der Box passend zur Card */
.card::after {
	/* Mit diesem Pseudo-Element wird sichergestellt, dass die unteren Ecken der Overlay-Box mitgerundet sind */
	content: "";
	position: absolute;
	inset: 0;
	pointer-events: none;
	border-radius: 14px;
}

/* Hover / Fokus Effekte */
.card:hover img,
.card:focus img {
	transform: scale(1.03);
	filter: blur(2px) brightness(0.6);
}

.card:hover .overlay,
.card:focus .overlay {
	transform: translateY(0);
}

/* Typografie im Overlay */
.overlay h3 {
	margin: 0 0 6px 0;
	font-size: 1.15rem;
	letter-spacing: 0.4px;
}
.overlay p {
	margin: 0;
	font-size: 0.95rem;
	opacity: 0.95;
	line-height: 1.2;
}

/* Accessibility: klickbare Fläche zeigt Fokus */
.card:focus {
	outline: 3px solid rgba(34,150,243,0.18);
	outline-offset: 3px;
}

/* Mobile: auf engen Bildschirmen keine seitlichen Gaps und kleinere Abstände,
   außerdem container-padding entfernen und die .cards wieder 100vh machen */
@media (max-width: 600px) {
	.container {
		max-width: 100%;
		padding: 0;
	}
	.cards {
		/* kein vertikales Padding mehr, volle Höhe */
		/* gap wird kleiner */
		gap: 8px;
	}
	/* Mobile Card-Höhe neu berechnen: (100vh - 2*0 - 2*8px) / 3 */
	.card {
		height: calc((100vh - (0px) - (8px * 2)) / 3);
	}
	.overlay { padding: 12px; }
	.overlay h3 { font-size: 1rem; }
	.overlay p { font-size: 0.9rem; }
}
